import requests
import argparse
import datetime

import name_fake as nf

# Registration site used for POST form information to by O'Reilly Learning.
oreilly_register_url = 'https://learning.oreilly.com/register/'


def register_free_trial_account(first_name, last_name, email, password):
    client = requests.session()

    try:
        client.get(oreilly_register_url)

        # Below is the token used by the site to prevent Cross-Site Script
        # The application is currently running on Django, and using a CSRF package
        # The below 'csrfsafari' cookie contains the token used for POST submissions
        csrf_token = client.cookies['csrfsafari']

        header = {
            "content-type": "application/x-www-form-urlencoded",
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'referer': 'https://learning.oreilly.com/register/',
        }

        payload = {
            'csrfmiddlewaretoken': csrf_token,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'password1': password,
            'country': 'US',
            'referrer': ''
        }

        # This can be used later to notify when a free trial ends
        signup_datetime = datetime.datetime.now()
        trial_end_datetime = signup_datetime + datetime.timedelta(days=10)

        r = client.post(oreilly_register_url, data=payload, headers=header)
        if r.status_code == 200:
            print("Your free trial has been created.\n")
            print("Please use the following information to login:\n")
            print("Email Address: " + email)
            print("Password: " + password)
            print("Your Free Trial Ends On: " + str(trial_end_datetime))

    except:
        print("There was an issue creating a free trial account on O'Reilly Learning")


def main():
    parser = argparse.ArgumentParser(description='ORLFT Exploit Execution')
    parser.add_argument('-fn', '--firstname', help='First Name of User', required=False)
    parser.add_argument('-ln', '--lastname', help='Last Name of User', required=False)
    parser.add_argument('-e', '--email', help='Email Address of User', required=False)
    parser.add_argument('-p', '--password', help='Password', required=False)

    args = vars(parser.parse_args())
    first_name = args['firstname']
    last_name = args['lastname']
    email = args['email']
    password = args['password']

    name_fake_json = nf.get_fake_identity_json()

    if first_name is None:
        first_name = nf.FakeAccount(name_fake_json).first_name

    if last_name is None:
        last_name = nf.FakeAccount(name_fake_json).last_name

    if email is None:
        email = nf.FakeAccount(name_fake_json).email
        print(email)

    if password is None:
        password = nf.FakeAccount(name_fake_json).password
        print(password)

    register_free_trial_account(first_name, last_name, email, password)


if __name__ == "__main__":
    main()
